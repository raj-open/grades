# generated by datamodel-codegen:
#   filename:  user-schema.yaml

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field


class ColumnsConfig(BaseModel):
    """
    Names of columns.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    points: str = Field('points', description='Names of column containing points.')
    grade: str = Field('grade', description='Names of column containing grades.')


class Grade(BaseModel):
    """
    Structure of a grade.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    grade: Union[int, float, str] = Field(
        ..., description='Label of grade (can be number or string).'
    )
    min: float = Field(..., description='Minimum value of points required for grade.')
    max: float = Field(..., description='Maximum value of points required for grade.')
    include_min: bool = Field(
        True,
        alias='include-min',
        description='Whether minimum value of points is included.',
    )
    include_max: bool = Field(
        False,
        alias='include-max',
        description='Whether maximum value of points is included.',
    )


class PLOTORIENTATION(Enum):
    """
    An enumeration of possible options for mode
    """

    horizontal = 'HORIZONTAL'
    vertical = 'VERTICAL'


class TableConfig(BaseModel):
    """
    Structure of table config
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    offset: int = Field(
        0, description='Number of unusable rows before the table begins.'
    )
    sep: str = Field(';', description='Symbol used for delimiter in table.')
    decimal: str = Field(
        '.', description='Symbol used for decimal for floating numbers in table.'
    )
    columns: Optional[ColumnsConfig] = Field(None, description='Names of columns.')


class Case(BaseModel):
    """
    User config for data in case.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    path_input: str = Field(
        ...,
        alias='path-input',
        description='Path to csv input file (including filename and extension).',
        regex='^[^\\\\\\/]+([\\\\\\/][^\\\\\\/]+)*(\\.[^\\\\\\/]+)?$',
    )
    path_output: str = Field(
        ...,
        alias='path-output',
        description='Path to output file (including filename and extension).',
        regex='^[^\\\\\\/]+([\\\\\\/][^\\\\\\/]+)*(\\.[^\\\\\\/]+)?$',
    )
    table_config: Optional[TableConfig] = Field(
        None, alias='table-config', description='Configuration of table.'
    )
    grade_schema: Optional[List[Grade]] = Field(
        None,
        alias='grade-schema',
        description='Key to grades as list.\n\n**NOTE:** Sort this from _highest_ to _lowest_ grade!',
    )
    fail_grades: List[Union[float, str, int]] = Field(
        [], alias='fail-grades', description='Value(s) of fail grade.'
    )
    remove_fail: bool = Field(
        False, alias='remove-fail', description='Whether to filter out failing grades.'
    )
    title: str = Field(
        ...,
        description='Title of plot.',
        example='Economics 1 Wintersemester - cohort {N}',
    )
    label_frequency: str = Field(
        'Frequency',
        alias='label-frequency',
        description='Label for axis for frequency.',
    )
    label_frequency_relative: str = Field(
        'Frequency (%)',
        alias='label-frequency-relative',
        description='Label for axis for frequency.',
    )
    label_grades: str = Field(
        'Grades', alias='label-grades', description='Label for axis for grades.'
    )
    label_points: str = Field(
        'Points', alias='label-points', description='Label for axis for points.'
    )
    plot_orientation: PLOTORIENTATION = Field(
        PLOTORIENTATION.horizontal, alias='plot-orientation'
    )
    as_grades: bool = Field(
        False,
        alias='as-grades',
        description='Whether to present data by grades.\n\n- if `True` data presented by grades-.\n- if `False` data presented by points but grouped by grades.',
    )
    relative: bool = Field(
        True,
        description='Whether to present histogram counts as absolute or relative frequencies.',
    )
    frequency_range: Optional[List[float]] = Field(
        None,
        alias='frequency-range',
        description='Limits of frequency axis.',
        max_items=2,
        min_items=2,
    )
